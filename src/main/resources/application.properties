
#Rodando banco e backend via docker (o hst deverá ser o nome do container)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://0.0.0.0:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=Postgres2018!
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

#create, create-drop, validate, update
spring.jpa.hibernate.ddl-auto=create-drop

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#show sql statement
#logging.level.org.hibernate.SQL=debug

#show sql values
#logging.level.org.hibernate.type.descriptor.sql=trace

logging.file=${user.home}/condominios-adm-api.log

server.port=8084
spring.main.banner-mode=off

server.servlet.context-path=/condominios-adm-api

#spring.jackson.date-format= # For instance, 'yyyy-MM-dd HH:mm:ss'.

#spring.profiles.active=dev



#keycloak.auth-server-url=http://localhost:8180/auth
#keycloak.realm=SpringBootKeycloak
#keycloak.resource=login-app
#keycloak.public-client=true
#keycloak.security-constraints[0].authRoles[0]=user1
#keycloak.security-constraints[0].securityCollections[0].patterns[0]=/bandas/*

#serve para basic autentication, nao utiliza oauth2
#spring.security.user.name=admin
#spring.security.user.password=admin

#OAuth2
#é possível encontrar esses valores em 
#http://localhost:8081/auth/realms/demo/.well-known/openid-configuration

#issuer
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/auth/realms/demo

#jwks_uri
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8081/auth/realms/demo/protocol/openid-connect/certs

#logging.level.org.springframework.security=DEBUG



#keycloak.auth-server-url=http://localhost:8081/auth
#keycloak.realm=demo
#keycloak.resource=teste
#keycloak.public-client=false
#keycloak.principal-attribute=demo